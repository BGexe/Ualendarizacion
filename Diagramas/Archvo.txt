//CreateUniqueEvent.js
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { db } from "../Firebase";
import { collection, addDoc } from "firebase/firestore";
import { showError, showSuccess } from "../ShowAlert";
import "../style.css";
//import { initializeGoogleApi, signInToGoogle, getGoogleToken, createEventInGoogleCalendar } from "./googleCalendarService"; // ‚úÖ Importar la nueva funci√≥n
import { initializeGoogleApi, createEventInGoogleCalendar } from "./googleCalendarService"; // ‚úÖ Importar la nueva funci√≥n

const CreateUniqueEvent = () => {
    const [eventName, setEventName] = useState("");
    const [description, setDescription] = useState("");
    const [eventDate, setEventDate] = useState("");
    const [eventTime, setEventTime] = useState("");
    const navigate = useNavigate();
    //const [userEmail, setUserEmail] = useState("");

    useEffect(() => {
        const storedGroup = JSON.parse(localStorage.getItem("selectedGroup"));
        if (storedGroup) {
            document.body.style.background = `linear-gradient(to bottom, ${storedGroup.headerColor || "#54a3ff"} 40%, #ffffff 40%)`;
        }
        document.body.style.overflow = "hidden";
        return () => {
            document.body.style.overflow = "auto";
        };
    }, []);

    useEffect(() => {
        const loadGoogleApi = async () => {
            try {
                await initializeGoogleApi();
                console.log("Google API inicializada correctamente.");
            } catch (error) {
                console.error("Error al cargar Google API:", error);
            }
        };
        loadGoogleApi();
    }, []);

    const handleCreateEvent = async () => {
        const selectedGroup = JSON.parse(localStorage.getItem("selectedGroup"));
        if (!selectedGroup || !selectedGroup.id) {
            showError("No se ha seleccionado un grupo.");
            return;
        }
    
        if (!eventName || !description || !eventDate || !eventTime) {
            showError("Por favor, complete todos los campos.");
            return;
        }
    
        try {
            //let token = getGoogleToken(); // Obtiene el token almacenado
    /*
            if (!token) {
                token = await signInToGoogle(); // Solo pide login si no hay token
            }
    */
            const eventRef = await addDoc(collection(db, "Evento"), {
                id_grupo: selectedGroup.id,
                nombre_evento: eventName,
                descripcion: description,
                es_ciclico: false,
                dia_evento: eventDate,
                hora_evento: eventTime,
                //usuario: email,
            });
    
            console.log("Evento creado en Firestore:", eventRef.id);
    
            const eventDetails = {
                summary: eventName,
                description: description,
                start: {
                    dateTime: `${eventDate}T${eventTime}:00`,
                    timeZone: "America/Mexico_City",
                },
                end: {
                    dateTime: `${eventDate}T${eventTime}:00`,
                    timeZone: "America/Mexico_City",
                },
            };
    
            await createEventInGoogleCalendar(eventDetails);
    
            console.log("Evento creado en Google Calendar.");
            showSuccess("Evento creado en Firestore y Google Calendar.");
    
            setEventName("");
            setDescription("");
            setEventDate("");
            setEventTime("");
            navigate(`/Group/${selectedGroup.id}`);
            
        } catch (error) {
            console.error("Error al crear el evento:", error);
            showError(`Error: ${error.message || "Hubo un error inesperado."}`);
        }
    };

    return (
        <div className="container">
            <button
                className="close-btn"
                onClick={() => {
                    const storedGroup = JSON.parse(localStorage.getItem("selectedGroup"));
                    navigate(`/Group/${storedGroup.id}`);
                }}
            >
                X
            </button>
            <img src="/images/event.png" alt="Logo" className="icon" />
            <div className="input-wrapper">
                <input
                    type="text"
                    placeholder="Nombre del evento"
                    value={eventName}
                    onChange={(e) => setEventName(e.target.value)}
                />
                <input
                    type="date"
                    placeholder="Fecha"
                    value={eventDate}
                    onChange={(e) => setEventDate(e.target.value)}
                    className="custom-font"
                />
                <input
                    type="time"
                    placeholder="Hora"
                    value={eventTime}
                    onChange={(e) => setEventTime(e.target.value)}
                />
                <textarea
                    placeholder="Descripci√≥n"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                />
                <button className="submit-btn" onClick={handleCreateEvent}>
                    Crear Evento
                </button>
            </div>
        </div>
    );
};

export default CreateUniqueEvent;

//googleCalendarService.js
import { gapi } from "gapi-script";

export const initializeGoogleApi = async () => {
    return new Promise((resolve, reject) => {
        gapi.load("client:auth2", async () => {
            try {
                await gapi.client.init({
                    clientId: "183817969866-t7v99abmqbi7pf9n28ak7201sii2jme6.apps.googleusercontent.com",
                    discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"],
                    scope: "https://www.googleapis.com/auth/calendar.events",
                });

                const authInstance = gapi.auth2.getAuthInstance();
                
                // üîπ Cerrar sesi√≥n antes de autenticar al nuevo usuario
                if (authInstance.isSignedIn.get()) {
                    await authInstance.signOut();
                }

                resolve(authInstance);
            } catch (error) {
                console.error("Error al inicializar Google API:", error);
                reject(error);
            }
        });
    });
};

export const signInToGoogle = async () => {
    try {
        const authInstance = gapi.auth2.getAuthInstance();
        await authInstance.signIn();
        return authInstance.currentUser.get().getBasicProfile().getEmail(); // üîπ Devuelve el correo del usuario autenticado
    } catch (error) {
        console.error("Error al iniciar sesi√≥n en Google:", error);
        throw error;
    }
};

export const createEventInGoogleCalendar = async (eventDetails) => {
    try {
        const token = localStorage.getItem("googleAccessToken");
    if (!token) {
        throw new Error("No hay un token de acceso. El usuario debe iniciar sesi√≥n.");
    }

        const response = await fetch(
            "https://www.googleapis.com/calendar/v3/calendars/primary/events",
            {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(eventDetails),
            }
        );

        const responseData = await response.json();

        if (!response.ok) {
            throw new Error(responseData.error?.message || "Error desconocido en Google Calendar.");
        }

        return responseData;
    } catch (error) {
        console.error("Error al crear evento en Google Calendar:", error);
        throw error;
    }
};